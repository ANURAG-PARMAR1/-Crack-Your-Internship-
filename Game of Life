class Solution {
    int dir[][] = {{1,0},{-1,0},{0,1},{0,-1},{-1,-1},{1,1},{1,-1},{-1,1}};
    int n,m;
    boolean isValid (int i,int j) {
        return i < n && j < m && i>=0 && j>=0;
    }
    int solve(int [][]board,int i,int j,int flag) {
        if(!isValid(i,j)) {
            return 0;
        }
        if(flag == 1 && board[i][j] == 1) {
            return 1;
        }
        else if(flag == 1 && board[i][j] == 0) {
            return 0;
        }

        int ans = 0;

            for(int x=0;x<8;x++) {
                ans += solve(board,i+dir[x][0],j+dir[x][1],1);
            }

        
        return ans;
    }
    public void gameOfLife(int[][] given) {
        n = given.length;
        m = given[0].length;
        int [][] temp = new int[n][m];

        for(int i=0;i<n;i++) {
            for(int j=0;j<m;j++) {
                temp[i][j] = given[i][j];
            }
        }
        for(int i=0;i<n;i++) {
            for(int j=0;j<m;j++) {
                int result = solve(temp,i,j,0);
                if(temp[i][j] == 0)  System.out.println(result);
                if(temp[i][j] == 1 && result < 2) given[i][j] = 0;
                else if(temp[i][j] == 1 && result == 2 || result == 3) given[i][j] = 1;
                else if(temp[i][j] == 1 && result > 3) given[i][j] = 0;
                else if(temp[i][j] == 0 && result == 3) {
                     given[i][j] = 1;
                }
               
            }
        }
    }
}
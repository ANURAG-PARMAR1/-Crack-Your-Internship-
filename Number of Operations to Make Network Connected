class Solution {
    int visited[];

    public void dfs (ArrayList<ArrayList<Integer>> adj,int node) {
        visited[node] = 1;

        for(int x:adj.get(node)) {
            if(visited[x] == 0) {
                dfs(adj,x);
            }
        }
    }

    public int makeConnected(int n, int[][] connections) {

        if(n-1 > connections.length) return -1;
        visited = new int[n];
        Arrays.fill(visited,0);
        ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
       
        for(int i=0;i<n;i++) {
            adj.add(new ArrayList<>());
        }
        for(int i=0;i<connections.length;i++){
            int s = connections[i][0];
            int d = connections[i][1];
            adj.get(s).add(d);
            adj.get(d).add(s);
        }
        
        int count =-1 ;
        for(int i=0;i<n;i++) {
            if(visited[i] == 0) {
                dfs(adj,i);
                count++;
            }
        }
      
        return count;




    }
}
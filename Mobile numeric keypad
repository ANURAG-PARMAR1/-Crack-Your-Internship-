class Solution {
    int matrix[][] = {{1,2,3},{4,5,6},{7,8,9},{-1,0,-1}};
    long dp[][][];
    int dir[][] = {{0,0},{1,0},{-1,0},{0,1},{0,-1}};
    boolean isValid(int x,int y) {
        return x>=0 && y>=0 && x<4 && y<3 && matrix[x][y] != -1;
    }
    
    long solve (int n,int x,int y) {
        if(!isValid(x,y)) return 0;
        if(n == 1) return 1;
        
        if(dp[n][x][y] != -2) return dp[n][x][y];
        long ans =0;
        for(int i=0;i<5;i++) {
            ans += solve(n-1,x+dir[i][0],y+dir[i][1]);
        }return dp[n][x][y]=ans;
        
    }
    public long getCount(int n) {
        long ans=0;
        dp= new long[n+1][4][3];
        for(long arr[][]:dp) {
            for(long brr[]:arr) {
                Arrays.fill(brr,-2);
            }
        }
        for(int i=0;i<4;i++) {
            for(int j=0;j<3;j++) {
              if(matrix[i][j] != -1) {
                  ans = ans + solve(n,i,j);
               
              }
            }
           
        }
        return ans;
    }
}
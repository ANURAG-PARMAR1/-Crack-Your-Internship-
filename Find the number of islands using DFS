class Solution {
    // Function to find the number of islands.
    
     public static void bfs (char[][] grid,ArrayList<Integer> node,boolean visited[][] ) {
        Queue <ArrayList<Integer>> q = new LinkedList<>();
        q.offer(node);
        int n = grid.length;
        int m = grid[0].length;
        while(!q.isEmpty()) {
            ArrayList<Integer> elm = q.poll();
            int i =elm.get(0);
            int j = elm.get(1);
            visited[elm.get(0)][elm.get(1)] = true;
            
           for(int row =-1;row<=1;row++) {
               for(int col =-1;col<=1;col++) {
                   int x = i+row;
                   int y = j+col;
                   
                   if(x>=0 && x<n && y>=0 && y<m ) {
                       if(grid[x][y] =='1' && !visited[x][y]) {
                           ArrayList<Integer> temp = new ArrayList();
                           temp.add(x);
                           temp.add(y);
                           q.offer(temp);
                           visited[x][y] = true;
                   }
               }
           }
        }
    }
     }
    
    public static int numIslands(char[][] grid) {
        boolean visited[][] = new boolean[grid.length][grid[0].length];
        int ans =0;
       
        
        for(int i=0;i<grid.length;i++) {
            for(int j=0;j<grid[0].length;j++) {
                if((grid[i][j] == '1') && !visited[i][j]) {
                    ans++;
                    ArrayList <Integer> l = new ArrayList<>();
                    l.add(i);
                    l.add(j);
                    bfs(grid,l,visited);
                    
                }
                
               
            }
        }
        return ans;
    }
class Pair {
    int node;
    int color;
     
     Pair(int n,int c) {
         this.node = n;
         this.color = c;
     }
}
class Solution
{   
    int visited [];
    boolean bfs(int V,ArrayList<ArrayList<Integer>>adj) {
            Queue<Pair> q = new LinkedList<>();
            visited[V] = 1;
            q.offer(new Pair(V,1));
            
            while(!q.isEmpty()) {
                int elm = q.peek().node;
                int col = q.peek().color;
                q.poll();
                for(int x:adj.get(elm)) {
                    if(visited[x] == 0) {
                        visited[x] = col *-1;
                        q.offer(new Pair(x,col*-1));
                    }
                    else if(col == visited[x]) return false;
                }
            }
            return true;
    }
    
    public boolean isBipartite(int V, ArrayList<ArrayList<Integer>>adj)
    {
       visited = new int[V];
      boolean ans = true; 
       for(int i=0;i<V;i++) {
           if(visited[i] == 0) {
               if(!bfs(i,adj)) return false;
           }
       }
       return true;
    }

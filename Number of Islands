class Pair {
    int first;
    int second;
    Pair(int a,int b) {
        this.first = a;
        this.second= b;
    }
}

class Solution {

    public void dfs (char [][] grid,Pair p) {
        int n = grid.length;
        int m = grid[0].length;
        int f = p.first;
        int s = p.second;
        if(f<0 || f>=n || s>=m || s<0) return;
        if(grid[f][s] == '1') {
            grid[f][s] = '0'; 
    
             dfs(grid,new Pair(f+1,s));
            dfs(grid,new Pair(f,s+1));
            dfs(grid,new Pair(f-1,s));
            dfs(grid,new Pair(f,s-1));
        } 
       
        
    }

    public int numIslands(char[][] grid) {
        int n= grid.length;
        int m = grid[0].length;
        int ans = 0;
        for(int i=0;i<n;i++) {
            for(int j=0;j<m;j++) {
                if(grid[i][j] == '1') {
                    dfs(grid,new Pair(i,j));
                    ans++;
                }
            }
        }
        for(int i=0;i<n;i++) {
            System.out.print(Arrays.toString(grid[i]));
        }
        return ans;
    }
}
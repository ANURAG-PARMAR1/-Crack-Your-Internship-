// O(n) Space Complexity
class Solution {
    public int trap(int[] height) {
        int n = height.length;
        int lMax [] = new int[n];
        int rMax [] = new int[n];
        int max = height[0];

        lMax[0] = 0;
        for(int i=1;i<n;i++) {
            lMax[i] = max;
            max = Math.max(max,height[i]);
        }
        
        max = height[n-1];
        rMax[n-1] = 0;
        for(int i=n-2;i>=0;i--) {
            rMax[i] = max;
            max = Math.max(max,height[i]);
        }
        
        int ans = 0;
        for(int i =0;i<n;i++) {
            if(Math.min(lMax[i],rMax[i]) > height[i]) {
                ans = ans + (Math.min(lMax[i],rMax[i]) - height[i]);
            }
        }
        return ans;

    }
}

// O(1) Space Complexity

